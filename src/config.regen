#!/usr/bin/perl

# Copyright (c) 2016 James Hunt
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.

use strict;
use warnings;

my $BASE = 256;
sub define {
	return sprintf("#define %-24s %d\n", $_[0], $BASE++);
}
sub lookup {
	return sprintf("\t{ %-24s %-15s },\n", "$_[0],", qq("$_[1]"));
}
sub name {
	my ($c, $s) = @_;
	$s = $s ? qq("$s") : "NULL";
	return sprintf("\t{ %-24s %-24s %-15s },\n", "$c,", qq("$c",), $s);
}


my @defines  = ();  # list of `#define T_BLAH ...` directives
my @keywords = ();  # guts of a struct assignment for keyword lookup
my @names    = ();  # guts of a struct assignment for T_* name lookup

while (<DATA>) {
	chomp;
	my ($type, $word) = split /\s+/;
	my $const = uc($word);

	if ($type eq 'token') {
		push @defines, define("T_${const}");
		push @names,     name("T_${const}", "");

	} elsif ($type eq 'keyword') {
		push @defines,  define("T_KEYWORD_${const}");
		push @keywords, lookup("T_KEYWORD_${const}", $word);
		push @names,      name("T_KEYWORD_${const}", $word);

	} elsif ($type eq 'type') {
		push @defines, define("T_TYPE_${const}");
		push @names,     name("T_TYPE_${const}", "");
	}
}

$"="";
print <<EOF
@defines
/* keyword lookup table */
static struct {
	int         value;
	const char *match;
} KEYWORDS[] = {
@keywords	{-1, NULL},
};

/* token const lookup table */
static struct {
	int         value;
	const char *name;
	const char *literal;
} TOKEN_NAMES[] = {
@names	{-1, NULL, NULL},
};
EOF

__DATA__
token eos
token restart
token error
token open
token close
token termx
keyword authdb
keyword backend
keyword cert
keyword check
keyword ciphers
keyword database
keyword debug
keyword default
keyword error
keyword group
keyword hba
keyword health
keyword info
keyword key
keyword lag
keyword listen
keyword log
keyword monitor
keyword off
keyword on
keyword password
keyword pidfile
keyword skipverify
keyword timeout
keyword tls
keyword user
keyword username
keyword weight
keyword workers
type bareword
type decimal
type integer
type address
type time
type size
type qstring
